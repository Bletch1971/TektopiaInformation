parameters:
- name: ApplicationName
  type: string
- name: CommonApplicationName
  type: string
- name: PublishFolder
  type: string
- name: TektopiaVersion
  type: string

stages:
- stage: build
  displayName: Build and Publish

  jobs:
  - job: build
    displayName: Build and Publish
    workspace:
      clean: all

    steps:
    - task: PowerShell@2
      displayName: Write Build Parameters
      condition: contains(variables['system.debug'], 'true')
      inputs:
        targetType: inline
        script: |
          Write-Host "ApplicationName: ${{parameters.ApplicationName}}"
          Write-Host "PublishFolder: ${{parameters.PublishFolder}}"
        pwsh: true

    - template: create-agent-capabilities-variables.yml@self

    - task: PowerShell@2
      displayName: Write Environment Variables
      condition: contains(variables['system.debug'], 'true')
      inputs:
        targetType: inline
        script: '(gci env:*).GetEnumerator() | Sort-Object Name | Out-String'
        pwsh: true
    
    - checkout: self
      path: 's/${{parameters.ApplicationName}}'
    
    - checkout: CommonRepo
      path: 's/${{parameters.CommonApplicationName}}'

    - task: PowerShell@2
      displayName: Tag Files
      env:
        DEPLOY_BUILDNUMBER: $(Build.BuildNumber)
      inputs:
        targetType: inline
        script: |
          $appVersion = $env:DEPLOY_BUILDNUMBER
          $tag = $appVersion

          Write-Host "Performing Git Tag Delete"
          git tag -d $tag
          git push origin :refs/tags/$tag

          Write-Host "Performing Git Tag"
          git tag $tag

          Write-Host "Performing Git Tag Push"
          git push --tags
        pwsh: true
        workingDirectory: '$(Build.SourcesDirectory)/${{parameters.ApplicationName}}'

    - task: PowerShell@2
      displayName: Update gradle.properties
      env:
        BUILD_BUILDNUMBER: $(Build.BuildNumber)
        BUILD_SOURCESDIRECTORY: $(Build.SourcesDirectory)
      inputs:
        targetType: inline
        script: |
          $version = $env:BUILD_BUILDNUMBER
   
          Write-Host "Replacing version values"
   
          $updateFile = "$env:BUILD_SOURCESDIRECTORY/${{parameters.ApplicationName}}/${{parameters.TektopiaVersion}}/gradle.properties"
          $content = Get-Content $updateFile 

          $pattern = "mod_version=.*"
          $replace = "mod_version=$version"
          $content = $content | %{
            if ($_ -match $pattern) 
            {
              $_ = $_ -replace [regex]::Escape($Matches[0]), $replace 
              Write-Host "  * Replaced $($Matches[0]) with $replace"
            }
            $_
          }
   
          $content | Set-Content $updateFile 
        pwsh: true

    - task: PowerShell@2
      displayName: 'Update ModDetails.java'
      env:
        BUILD_SOURCESDIRECTORY: $(Build.SourcesDirectory)
      inputs:
        targetType: inline
        script: |
          Write-Host "Replacing version values"
   
          $updateFile = "$env:BUILD_SOURCESDIRECTORY/${{parameters.ApplicationName}}/${{parameters.TektopiaVersion}}/src/main/java/bletch/${{parameters.ApplicationName}}/core/ModDetails.java"
   
          $content = Get-Content $updateFile 
   
          $pattern = "private static final int VersionMajor = .*;"
          $replace = "private static final int VersionMajor = $(VersionMajor);"
          $content = $content | %{
            if ($_ -match $pattern) {
              $_ = $_ -replace [regex]::Escape($Matches[0]), $replace 
              Write-Host "     * Replaced $($Matches[0]) with $replace"
            }
            $_
          }
   
          $pattern = "private static final int VersionMinor = .*;"
          $replace = "private static final int VersionMinor = $(VersionMinor);"
          $content = $content | %{
            if ($_ -match $pattern) {
              $_ = $_ -replace [regex]::Escape($Matches[0]), $replace 
              Write-Host "     * Replaced $($Matches[0]) with $replace"
            }
            $_
          }
   
          $pattern = "private static final int VersionRevision = .*;"
          $replace = "private static final int VersionRevision = $(VersionRevision);"
          $content = $content | %{
            if ($_ -match $pattern) {
              $_ = $_ -replace [regex]::Escape($Matches[0]), $replace 
              Write-Host "     * Replaced $($Matches[0]) with $replace"
            }
            $_
          }
   
          $content | Set-Content $updateFile 
        pwsh: true
 
    - task: Gradle@3
      displayName: 'Gradle Build'
      inputs:
        gradleWrapperFile: '${{parameters.ApplicationName}}/${{parameters.TektopiaVersion}}/gradlew.bat'
        workingDirectory: '${{parameters.ApplicationName}}/${{parameters.TektopiaVersion}}'
        publishJUnitResults: false
        jdkVersionOption: 1.8

    - task: CopyFiles@2
      displayName: 'Copy Artifact Files'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)'
        Contents: |
         ${{parameters.ApplicationName}}/${{parameters.TektopiaVersion}}/build/libs/*.jar
         ${{parameters.ApplicationName}}/${{parameters.TektopiaVersion}}/updateforge.json
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true
        flattenFolders: true
        preserveTimestamp: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(PublishFolder)'

    - template: clean-agent-folders.yml@self
      parameters:
        CleanArtifactsFolder: true
        CleanBinariesFolder: true
        CleanSourcesFolder: true
        CleanPublishFolder: true
        PublishFolder: ${{parameters.PublishFolder}}